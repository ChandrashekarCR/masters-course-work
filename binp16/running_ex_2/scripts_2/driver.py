#! ~/miniconda3/bin/python

'''
Script Name: driver.py
Description: This script automates the execution of a series of terminal commands to test different cases for a DNA sequence alignment tool. The script simulates user input and captures the output for each command execution. It is designed to handle various scenarios, such as missing or incorrect parameters, invalid file paths, and incomplete input.

User-defined functions: None

Modules used:
os: For interacting with the operating system and file paths.
subprocess: To run terminal commands, capture outputs, and handle errors.

Procedure:
1. A list of terminal commands is defined, covering various test cases for a DNA sequence alignment tool ("FastaAligner.py").
2. For each command, the script simulates user input ("y\n" for "yes") and executes the command using the "subprocess" module.
3. Each command's output (both standard output and error output) is captured.
4. If the command runs successfully, the script prints a success message along with the command's output.
5. If any command fails, the error message is displayed.

Test Cases Covered:
1. Perfect Case: All inputs and outputs are correctly provided.
2. Incomplete Parameters: The parameters file is not fully defined.
3. Empty Parameters File: The parameters file exists but is empty.
4. Incorrect Parameters: The parameters file contains invalid values.
5. No Parameters File: The parameters file is not provided.
6. Missing Output Path: The output file path is not provided.
7. Wrong FASTA File: An incorrect file is passed as the FASTA file.
8. Invalid Path: The FASTA file path is invalid.
9. Invalid Parameters File Path: The parameters file path is invalid.
10. Output is a Directory: The output file path is a directory instead of a file.
11. Only Output File Name: Only the output file name is provided.
12. Output Directory with Slash: The output directory is followed by a `/`.
13. Output Directory with "./": The output directory is mentioned with `./`.
14. Output Directory with ".": Only `.` is provided as the output path.
15. The sequence file is full of gaps. It does not contain a single amino acid.
16. The parameter file consists of float values
17. The parameter file consits of float values but in wrong syntax

Input:
Terminal Commands: List of terminal commands to be executed sequentially, each testing a different scenario for the DNA sequence alignment tool.

Output:
For each command:
Standard Output: The output generated by the command, such as results of the sequence alignment.
Error Output: Any errors encountered during execution.
Success/Failure Messages: Indicates whether the command was executed successfully or encountered errors.

Usage:
Note, this script is desgined in such a way that all the commands are written from the parent directory of this script.
Therefore run this script from the directory that contains the three directories data, scripts and output.
The path for running this script should be as follows-:
<your file path here>/running_ex_2/ (You should be in this directory)
Eg. (base) inf-21-2024@bioinf-serv2:~/binp16/python_scripts/running_ex_2$ python scripts/driver.py  
'''


# Importing libraries
import os
import argparse
import time
import subprocess

# Each list within this list is a set of terminal commands
            
commands = [# 1) A PERFECT case where all the inputs and outputs are given.
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/correct_parameters.txt','-o','./results/correct_full_output.txt'],
            # 2) A case where the paramerters are not complete.
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/half_parameters.txt','-o','./results/correct_half_output.txt'], 
            # 3) A case where the parameters file is present, but the file is empty.
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/empty_parameters.txt','-o','./results/correct_empty_output.txt'],
            # 4) A case where the parameters file is present, but the file consists of wrong parameters.
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/wrong_parameters.txt','-o','./results/correct_wrong_output.txt'],
            # 5) A case where the parameters file is not given as the arguement.
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-o','./results/correct_no_parameter_output.txt'],
            # 6) A case where the parameters file is given, but not the output file path and name.
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/correct_parameters.txt'],
            # 7) A case where the wrong FASTA files is being parsed.
            ['python','./scripts/FastaAligner.py','-i','./data/correct_parameters.txt'],
            # 8) A case where the path is invalid.
            ['python','./scripts/FastaAligner.py','-i','./data/some/random/path'],
            # 9) A case where the FASTA file path is valid but the file path of the parameters is not valid.
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/some/random/file/path'],
            # 10) A case where the output file is a directory
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/parameters.txt','-o','./results'],
            # 11) A case where only the output file name is mentioned.
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/parameters.txt','-o','output_file_name_only.txt'],
            # 12) A case where only the output directory is mentioned with a directory followed by a /
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/parameters.txt','-o','./results/'],
            # 13) A case where the ouput directory is menioned with a ./
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/parameters.txt','-o','./'],
            # 14) A case where the output directory is only mentioned with a .
            ['python','./scripts/FastaAligner.py','-i','./data/score.extra.fna','-p','./data/parameters.txt','-o','.'],
            # 15) A case where the aligned file is present, but is full of gaps
            ['python','./scripts/FastaAligner.py','-i','./data/full_gaps_fasta.fna','-p','./data/parameters.txt','-o','./results/full_gaps.txt'],
            # 16) A case where the parameters file is in decimal.
            ['python','./scripts/FastaAligner.py','-i','./data/float_score.fna','-p','./data/correct_parameters_float.txt','-o','./results/correct_float_output.txt'],
            # 17) A case where the parameters file is in decimal but not the correct decimal format
            ['python','./scripts/FastaAligner.py','-i','./data/float_score.fna','-p','./data/float_score_wrong.txt','-o','./results/wrong_float_output.txt']
            ]
user_input = "y\n"  # Press yes and the press enter. It's 'y' and new line.


for i,terminal_commands in enumerate(commands):
    try:
        # Run the command and capture output
        result = subprocess.run(
            terminal_commands, 
            input=user_input,  # Pass the simulated user input
            text=True,         # Ensure input/output are treated as strings
            capture_output=True  # Capture stdout and stderr
        )

        # Print command outputs (stdout/stderr)
        print(f'Run {i+1} is successful!')
        print("Command Output:\n",result.stdout)
        if result.stderr:
            print("Error Output:\n", result.stderr)

    except Exception as e:
        print(f"An error occurred: {e}")


